{"version":3,"sources":["logo.svg","components/HandChallenge/config.js","components/VideoFeed/config.js","components/VideoFeed/VideoFeed.js","components/Capture/Capture.js","components/HandSet/index.js","components/HandChallenge/HandChallenge.js","App.js","reportWebVitals.js","index.js"],"names":["EMOJI_LIST","LANDMARKS","CONSTRAINTS","audio","video","width","height","Video","styled","VideoFeed","debug","fps","onCapture","onWarmUp","videoRef","useRef","useEffect","current","requestId","newStream","navigator","mediaDevices","getUserMedia","then","stream","srcObject","play","onLoadedData","a","update","timestamp","timeout","setTimeout","requestAnimationFrame","clearTimeout","addEventListener","catch","err","console","log","tracks","getTracks","length","forEach","track","stop","error","cancelAnimationFrame","ref","hidden","Canvas","canvas","props","displayCanvas","Capture","drawFunction","display","canvasRef","handleCapture","useCallback","context","getContext","drawImage","readyState","HandDiv","div","Emoji","validated","HandSet","handDict","items","Object","keys","map","key","initial","x","opacity","animate","exit","join","require","Challenge","Signature","HandChallenge","useState","model","setModel","brain","setBrain","loading","setLoading","step","setStep","challenge","setChallenge","prediction","setPrediction","generateChallenge","indexRandom","emoji","combinationDict","i","emojiList","lastIndex","indexOf","pop","splice","Math","floor","random","loadHandPose","handpose","loadBrain","tf","drawHands","estimateHands","predictions","inputs","landmarks","y","fillStyle","fillRect","push","handInViewConfidence","shape","tensor","predict","brainPrediction","data","warmUp","dataSync","dispose","alt","src","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70a0f4dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const EMOJI_LIST = [\"✌🏼\", \"👍🏼\", \"👎🏼\", \"👊🏼\"];\nexport const CHALLENGE_LENGTH = 6;\n\nexport const LANDMARKS = [\n  382.89468982797587,\n  189.6060873180171,\n  364.97472935264335,\n  157.99380422455857,\n  349.81658344602204,\n  127.86895155374417,\n  345.08910780909014,\n  101.41370398045737,\n  346.86908721262125,\n  73.44703027656219,\n  355.6993516939492,\n  127.57557930451689,\n  305.5844156539135,\n  139.2274858828515,\n  316.1408329255687,\n  149.93768443882,\n  332.53896440859734,\n  145.40127184449605,\n  363.13211081465556,\n  148.26131397956223,\n  304.7655372527518,\n  160.1268434929989,\n  318.1045271349238,\n  167.94007831067404,\n  335.3781143300872,\n  163.33186790248777,\n  367.8101524461511,\n  170.9703133833445,\n  312.2492051305888,\n  179.57326554977845,\n  326.00259626784987,\n  185.96424837611312,\n  342.80571918183824,\n  182.8977109242005,\n  368.2996796728901,\n  193.52342495924404,\n  323.98034022154275,\n  195.2811793932746,\n  335.0334852303632,\n  197.47524075528406,\n  350.7494693537507,\n  195.39913670877823,\n];\n","export const CONSTRAINTS = { audio: false, video: { width: 400, height: 300 } };\n","import { useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { CONSTRAINTS } from \"./config\";\n\nconst Video = styled.video`\n  position: absolute;\n  top: 16px;\n  left: 16px;\n`;\n\nconst VideoFeed = ({ debug = false, fps = 60, onCapture, onWarmUp }) => {\n  const videoRef = useRef(null);\n\n  useEffect(() => {\n    if (videoRef.current) {\n      const video = videoRef.current;\n      let requestId;\n      let newStream;\n      navigator.mediaDevices\n        .getUserMedia(CONSTRAINTS)\n        .then((stream) => {\n          newStream = stream;\n          videoRef.current.srcObject = stream;\n          videoRef.current.play();\n\n          const onLoadedData = async () => {\n            await onWarmUp(video);\n\n            const update = (timestamp) => {\n              onCapture(timestamp, videoRef.current);\n\n              if (fps < 60) {\n                const timeout = setTimeout(() => {\n                  requestId = requestAnimationFrame(update);\n                  clearTimeout(timeout);\n                }, 1000 / fps);\n              } else {\n                requestId = requestAnimationFrame(update);\n              }\n            };\n            requestId = requestAnimationFrame(update);\n          };\n\n          video.addEventListener(\"loadeddata\", onLoadedData);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n      return () => {\n        const tracks = newStream && newStream.getTracks();\n\n        if (tracks && tracks.length) tracks.forEach((track) => track.stop());\n        else console.error(`Can't stop new stream`);\n\n        if (requestId) cancelAnimationFrame(requestId);\n      };\n    }\n  }, [debug, fps, onCapture, onWarmUp]);\n\n  return (\n    <>\n      <Video ref={videoRef} hidden={!debug} />\n    </>\n  );\n};\n\nexport default VideoFeed;\n","import VideoFeed from \"../VideoFeed/VideoFeed\";\nimport { CONSTRAINTS } from \"../VideoFeed/config\";\nimport { useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\n\nconst Canvas = styled.canvas`\n  display: ${(props) => (props.displayCanvas ? \"none\" : \"block\")};\n`;\n\nconst Capture = ({ drawFunction, onWarmUp, display }) => {\n  const canvasRef = useRef(null);\n\n  const handleCapture = useCallback(\n    (timestamp, video) => {\n      if (video != null) {\n        const context = canvasRef.current.getContext(\"2d\");\n        context.drawImage(\n          video,\n          0,\n          0,\n          CONSTRAINTS.video.width,\n          CONSTRAINTS.video.height\n        );\n        if (video.readyState === 4) {\n          drawFunction(context, video);\n        }\n      }\n    },\n    [drawFunction]\n  );\n\n  return (\n    <>\n      <VideoFeed debug={false} onCapture={handleCapture} onWarmUp={onWarmUp} />\n      <Canvas ref={canvasRef} {...CONSTRAINTS.video} displayCanvas={display} />\n    </>\n  );\n};\n\nexport default Capture;\n","import styled from \"styled-components\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nconst HandDiv = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Emoji = styled.div`\n  background: ${(props) => (props.validated ? \"green\" : \"#aeecdb\")};\n`;\n\nconst HandSet = ({ handDict }) => {\n  const items = Object.keys(handDict).map((key) => (\n    <Emoji key={key} validated={handDict[key][1]}>\n      {handDict[key][0]}\n    </Emoji>\n  ));\n\n  const key = Object.keys(handDict).map((key) => handDict[key][0]);\n\n  return (\n    <>\n      <AnimatePresence>\n        <motion.div\n          key={key.join(\"\")}\n          initial={{ x: 700, opacity: 0 }}\n          animate={{ x: 0, opacity: 1 }}\n          exit={{ x: -700, opacity: 0 }}\n        >\n          <HandDiv>{items}</HandDiv>\n        </motion.div>\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport default HandSet;\n","import { EMOJI_LIST, CHALLENGE_LENGTH, LANDMARKS } from \"./config\";\nimport Capture from \"../Capture/Capture\";\nimport HandSet from \"../HandSet\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport styled from \"styled-components\";\n\nrequire(\"@tensorflow/tfjs-backend-webgl\");\n\nconst Challenge = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  font-size: 50px;\n`;\n\nconst Signature = styled.div`\n  position: absolute;\n  font-size: 20px;\n  bottom: 0px;\n  right: 20px;\n`;\n\nconst HandChallenge = () => {\n  const [model, setModel] = useState(null);\n  const [brain, setBrain] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [step, setStep] = useState(0);\n  const [challenge, setChallenge] = useState(0);\n  const [prediction, setPrediction] = useState(null);\n\n  const generateChallenge = () => {\n    let combinationDict = {};\n    let indexRandom;\n    let emoji;\n    for (let i = 0; i < CHALLENGE_LENGTH; i++) {\n      let emojiList = [...EMOJI_LIST];\n      if (i > 0) {\n        let lastIndex = emojiList.indexOf(emoji);\n        if (lastIndex === emojiList.length - 1) {\n          emojiList.pop();\n        } else {\n          emojiList.splice(lastIndex, 1);\n        }\n      }\n      indexRandom = Math.floor(Math.random() * emojiList.length);\n      emoji = emojiList[indexRandom];\n      combinationDict[i] = [emojiList[indexRandom], false];\n    }\n    return combinationDict;\n  };\n\n  if (step === Object.keys(challenge).length) {\n    setStep(0);\n    setChallenge(generateChallenge());\n  } else if (EMOJI_LIST[prediction] === challenge[step][0]) {\n    challenge[step][1] = true;\n    setStep(step + 1);\n  }\n\n  useEffect(() => {\n    const loadHandPose = async () => {\n      let model = await handpose.load();\n      setModel(model);\n    };\n    const loadBrain = async () => {\n      let brain = await tf.loadLayersModel(\n        \"https://handpose.baptiste-monpezat.vercel.app/model.json\"\n      );\n      setBrain(brain);\n    };\n    loadHandPose();\n    loadBrain();\n    setChallenge(generateChallenge());\n  }, []);\n\n  const drawHands = useCallback(\n    async (context, video) => {\n      const predictions = await model.estimateHands(video);\n      if (predictions.length > 0) {\n        let inputs = [];\n        for (let i = 0; i < predictions[0].landmarks.length; i++) {\n          let x = predictions[0].landmarks[i][0];\n          let y = predictions[0].landmarks[i][1];\n          context.fillStyle = \"#FFFFFF\";\n          context.fillRect(x, y, 10, 10);\n          inputs.push(x);\n          inputs.push(y);\n        }\n        if (predictions[0].handInViewConfidence > 0.9) {\n          let shape = [1, 42];\n          let tensor = tf.tensor(inputs, shape);\n          const brainPrediction = await brain.predict(tensor);\n          if (brainPrediction) {\n            tf.argMax(brainPrediction, 1)\n              .data()\n              .then((data) => setPrediction(data[0]));\n          }\n        }\n      }\n    },\n    [model, brain]\n  );\n\n  const warmUp = useCallback(\n    async (video) => {\n      let shape = [1, 42];\n      let tensor = tf.tensor(LANDMARKS, shape);\n      const brainPrediction = await brain.predict(tensor);\n      brainPrediction.dataSync();\n      brainPrediction.dispose();\n\n      await model.estimateHands(video);\n\n      setTimeout(() => {\n        setLoading(false);\n      }, 7000);\n    },\n    [model, brain]\n  );\n\n  if (!(model && brain)) {\n    return (\n      <img\n        alt=\"\"\n        src=\"https://cdn.dribbble.com/users/989157/screenshots/4632455/loading-animation-bored-hand.gif\"\n      />\n    );\n  } else {\n    return (\n      <>\n        <Challenge>\n          {loading ? (\n            <img\n              alt=\"\"\n              src=\"https://cdn.dribbble.com/users/989157/screenshots/4632455/loading-animation-bored-hand.gif\"\n            />\n          ) : (\n            <HandSet handDict={challenge} />\n          )}\n          <Capture\n            drawFunction={drawHands}\n            onWarmUp={warmUp}\n            display={loading}\n          />\n          <Signature>\n            <p>Coded with 🤙🏻 by Baptiste Monpezat</p>\n          </Signature>\n        </Challenge>\n      </>\n    );\n  }\n};\n\nexport default HandChallenge;\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport HandChallenge from \"./components/HandChallenge/HandChallenge\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <HandChallenge />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}